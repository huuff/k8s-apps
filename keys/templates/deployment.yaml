apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      {{- if .Values.verticalPodAutoscaler.enabled }}
      annotations:
        "kyverno.haff.xyz/ignore-require-requests-and-limits": "yes"
      {{- end }}
    spec:
      containers:
        - name: nginx
          image: nginx:alpine@{{ .Values.nginx.digest }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.port }}
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: www-root
              mountPath: /www/keys
              readOnly: true
            - name: cache
              mountPath: /var/cache/nginx
            - name: run
              mountPath: /var/run
            - name: tmp
              mountPath: /tmp
          {{- if not .Values.verticalPodAutoscaler.enabled }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
        - name: indexer
          image: busybox@{{ .Values.indexer.digest }}
          imagePullPolicy: Always
          {{- if not .Values.verticalPodAutoscaler.enabled }}
          resources:
            {{- toYaml .Values.indexer.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: ssh-keys
              mountPath: /keys
            - name: www-root
              mountPath: /www/keys
          command:
            - "/bin/sh"
            - "-c"
            - | 
              while true; 
              do 
                cp /keys/* /www/keys
                rm -f /www/keys/all
                # Merge all keys
                for key in /www/keys/*;
                do
                  echo "$(cat $key)" >> /www/keys/all
                done
                sleep {{ .Values.indexer.secondsBetweenRefreshes }}
              done
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.securityContext.user }}
        runAsGroup: {{ .Values.securityContext.group }}
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: nginx-conf
          configMap:
            name: {{ .Release.Name }}-nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: ssh-keys
          configMap:
            name: {{ .Release.Name }}-ssh-keys
        - name: www-root
          emptyDir: {}
        # XXX: the necessary read-write directories for nginx
        # so the container can be started with a read-only root filesystem
        - name: cache
          emptyDir: {}
        - name: run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
