apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations:
      labels:
        app: {{ .Release.Name }}
    spec:
      initContainers: 
        - name: create-config
          image: busybox@sha256:52f431d980baa76878329b68ddb69cb124c25efa6e206d8b0bd797a828f0528e
          env:
            - name: SERVER_PORT
              value: {{ .Values.port | quote }}
            - name: DB_DIALECT
              value: {{ .Values.database.dialect }}
          {{- if ne .Values.database.dialect "sqlite3" }}
            - name: DB_HOST
              value: {{ .Values.database.host }}
            - name: DB_PORT
              value: {{ .Values.database.port | quote }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
          {{- end }}
            - name: DEFAULTUSER_NAME
              value: {{ .Values.defaultuser.name }}
            - name: DEFAULTUSER_PASS
              value: {{ .Values.defaultuser.password }}
          command:
            - "sh"
            - "-c"
            - |
              cat >> "/etc/gotify/config.yml" <<EOF
              server:
                keepaliveperiodseconds: 0
                listenaddr: "" 
                port: ${SERVER_PORT} 
                stream:
                  pingperiodseconds: 45 
              database:
                dialect: ${DB_DIALECT}
              {{- if eq .Values.database.dialect "postgres" }}
                connection: "host=${DB_HOST} port=${DB_PORT} dbname=${DB_NAME} user=$(cat /secrets/database-credentials/username) password=$(cat /secrets/database-credentials/password)"
              {{- else if eq .Values.database.dialect "sqlite3" }}
                connection: data/gotify.db
              {{- end }}
              defaultuser:
                name: ${DEFAULTUSER_NAME}
                pass: ${DEFAULTUSER_PASS}
              passstrength: 10
              uploadedimagesdir: data/images
              pluginsdir: data/plugins
              registration: false
              EOF
          volumeMounts:
            - name: gotify-config
              mountPath: /etc/gotify
          {{- if .Values.database.credentials.secretName }}
            - name: database-credentials
              mountPath: /secrets/database-credentials
          {{- end }}
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
      containers:
        - name: gotify
          image: gotify/server@{{ .Values.digest }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.port }}
          volumeMounts:
            - name: gotify-data
              mountPath: /app/data
            - name: gotify-config
              mountPath: /etc/gotify
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: GOTIFY_SERVER_PORT
              value: "" # This is predefined in the image, making it impossible to use config.yml by default
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.user }}
        runAsGroup: {{ .Values.group }}
      volumes:
        - name: gotify-data
          emptyDir: {}
        - name: gotify-config
          emptyDir:
            medium: Memory
        {{- if .Values.database.credentials.secretName }}
        - name: database-credentials
          secret:
            secretName: {{ .Values.database.credentials.secretName }}
            optional: true
            items:
              - key: {{ .Values.database.credentials.userKey }}
                path: username
              - key: {{ .Values.database.credentials.passwordKey }}
                path: password
        {{- end }}
